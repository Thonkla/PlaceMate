import React, { useState, useEffect } from "react";
import "./PlannerForm.css";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

const PlannerForm = ({ setPlans }) => {
    const [title, setTitle] = useState("");
    const [startTime, setStartTime] = useState("");
    const [endTime, setEndTime] = useState("");
    const [message, setMessage] = useState("");
    const [userId, setUserId] = useState(null);

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å localStorage
    const getToken = () => {
        return localStorage.getItem("auth_token") || null;
    };

    useEffect(() => {
        const token = getToken();

        if (!token) {
            console.warn("‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ auth_token ‡πÉ‡∏ô LocalStorage");
            setUserId(null);
            return;
        }

        try {
            console.log("üîç Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", token);
            const decodedToken = jwtDecode(token);
            console.log("‚úÖ Token Decode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", decodedToken);
            setUserId(decodedToken?.user_id || null);
        } catch (error) {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Decode Token:", error);
            setUserId(null);
        }
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setMessage(""); // ‚úÖ Reset Message ‡∏Å‡πà‡∏≠‡∏ô Submit

        if (!userId) {
            setMessage("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á");
            return;
        }

        const newPlan = {
            user_id: userId,
            title,
            start_time: startTime,
            end_time: endTime,
        };

        const token = getToken();
        if (!token) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÉ‡∏ô LocalStorage, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á API ‡πÑ‡∏î‡πâ");
            setMessage("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
            return;
        }

        try {
            console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ API:", newPlan);
            const response = await axios.post("http://localhost:5000/api/planner/add", newPlan, {
                withCredentials: true,
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });

            console.log("üü¢ API Response:", response.data);

            if (response.status === 201) {
                setMessage("‚úÖ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                setTitle("");
                setStartTime("");
                setEndTime("");
                setPlans((prevPlans) => [...prevPlans, response.data]);
            } else {
                setMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô");
            }
        } catch (err) {
            console.error("‚ùå API Error:", err.response?.data || err.message);
            setMessage("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
        }
    };

    return (
        <div className="planner-form-container">
            <h2>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà</h2>
            {!userId ? (
                <p className="error-message">‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</p>
            ) : (
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label>üìç ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô:</label>
                        <input
                            type="text"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</label>
                        <input
                            type="datetime-local"
                            value={startTime}
                            onChange={(e) => setStartTime(e.target.value)}
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label>üìÖ ‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</label>
                        <input
                            type="datetime-local"
                            value={endTime}
                            onChange={(e) => setEndTime(e.target.value)}
                            required
                        />
                    </div>
                    <button type="submit">üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</button>
                </form>
            )}

            {message && <p className="message">{message}</p>}
        </div>
    );
};

export default PlannerForm;
